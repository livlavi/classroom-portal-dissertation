@startuml AllconnectEdu 
!theme plain

' Optional: Set a title for your diagram
title AllConnectEdu Database Schema - UML Class Diagram

' ---------------------------------------
' Core User Management Tables
' ---------------------------------------
class Users {
  + id: INT {PK}
  --
  username: VARCHAR(50) {Unique}
  password: VARCHAR(255)
  email: VARCHAR(100) {Unique}
  first_name: VARCHAR(50)
  last_name: VARCHAR(50)
  role: ENUM('admin', 'teacher', 'parent', 'student')
  created_at: TIMESTAMP
}

class Teachers {
  + id: INT {PK}
  user_id: INT {FK} {Unique}
  --
  first_name: VARCHAR(50)
  last_name: VARCHAR(50)
  teacher_number: VARCHAR(20) {Unique}
  address: TEXT
  email: VARCHAR(100) {Unique}
  telephone: VARCHAR(20)
  subject_taught: VARCHAR(100)
}

class Parents {
  + id: INT {PK}
  user_id: INT {FK} {Unique}
  --
  first_name: VARCHAR(50)
  last_name: VARCHAR(50)
  parent_type: ENUM('mother', 'father', 'guardian')
  email: VARCHAR(100) {Unique}
  home_address: TEXT
  telephone: VARCHAR(20)
  child_full_name: VARCHAR(100)
}

class Students {
  + id: INT {PK}
  user_id: INT {FK} {Unique}
  --
  first_name: VARCHAR(50)
  last_name: VARCHAR(50)
  student_number: VARCHAR(20) {Unique}
  mother_name: VARCHAR(100)
  father_name: VARCHAR(100)
  year_of_study: INT
  main_teacher: VARCHAR(100)
  address: TEXT
  email: VARCHAR(100) {Unique}
}

class Admins {
  + id: INT {PK}
  user_id: INT {FK} {Unique}
  --
  first_name: VARCHAR(50)
  last_name: VARCHAR(50)
  email: VARCHAR(100) {Unique}
  telephone: VARCHAR(20)
}

class UniqueCodes {
  + id: INT {PK}
  --
  code: VARCHAR(50) {Unique}
  role: ENUM('teacher', 'parent', 'student')
  email: VARCHAR(100)
  first_name: VARCHAR(50)
  last_name: VARCHAR(50)
  used: BOOLEAN
  created_at: TIMESTAMP
}

class ProfilePhotos {
  + id: INT {PK}
  user_id: INT {FK} {Unique}
  --
  photo_path: VARCHAR(255)
  created_at: TIMESTAMP
}

' ---------------------------------------
' User Relations (Inheritance/Composition)
' ---------------------------------------
Users "1" -- "1" Teachers : user_id
Users "1" -- "1" Parents : user_id
Users "1" -- "1" Students : user_id
Users "1" -- "1" Admins : user_id
Users "1" -- "0..1" ProfilePhotos : user_id

' ---------------------------------------
' Parent-Student Association
' ---------------------------------------
class Parent_Student {
  + parent_id: INT {PK} {FK}
  + student_id: INT {PK} {FK}
}

Parents "1" -- "M" Parent_Student : parent_id
Students "1" -- "M" Parent_Student : student_id (via Users.id)

' ---------------------------------------
' Communication Tables
' ---------------------------------------
class ChatMessages {
  + id: INT {PK}
  sender_id: INT {FK}
  receiver_id: INT {FK}
  --
  receiver_role: ENUM('teacher', 'student', 'parent')
  message: TEXT
  created_at: TIMESTAMP
  read_status: TINYINT
  sender_role: ENUM('teacher', 'student', 'parent', 'admin')
}

class Notifications {
  + id: INT {PK}
  sender_id: INT {FK}
  --
  message: VARCHAR(255)
  created_at: DATETIME
  target: VARCHAR(255)
  type: VARCHAR(50)
}

class Newsletters {
  + id: INT {PK}
  sender_id: INT {FK}
  --
  subject: VARCHAR(255)
  body: TEXT
  target: VARCHAR(255)
  status: ENUM('draft', 'sent')
  scheduled_at: DATETIME
  created_at: DATETIME
}

class Announcements {
  + id: INT {PK}
  teacher_id: INT {FK}
  --
  title: VARCHAR(255)
  description: TEXT
  created_at: TIMESTAMP
}

class AnnouncementRecipients {
  + id: INT {PK}
  announcement_id: INT {FK}
  recipient_id: INT {FK}
}

class AnnouncementReads {
  + id: INT {PK}
  announcement_id: INT {FK}
  user_id: INT {FK}
  --
  read_at: TIMESTAMP {Unique(announcement_id, user_id)}
}

' ---------------------------------------
' Communication Relationships
' ---------------------------------------
Users "1" -- "M" ChatMessages : sender_id
Users "1" -- "0..M" ChatMessages : receiver_id (optional)
Users "1" -- "M" Notifications : sender_id
Users "1" -- "M" Newsletters : sender_id
Users "1" -- "M" Announcements : teacher_id (via Users.id)

Announcements "1" -- "M" AnnouncementRecipients : announcement_id
Users "1" -- "M" AnnouncementRecipients : recipient_id
Announcements "1" -- "M" AnnouncementReads : announcement_id
Users "1" -- "M" AnnouncementReads : user_id

' ---------------------------------------
' Academic Management Tables
' ---------------------------------------
class Homework {
  + id: INT {PK}
  teacher_id: INT {FK}
  --
  title: VARCHAR(255)
  description: TEXT
  due_date: DATE
  attachment_path: VARCHAR(255)
  subject: VARCHAR(255)
  total_questions: INT
  created_at: TIMESTAMP
}

class Homework_Students {
  + homework_id: INT {PK} {FK}
  + student_id: INT {PK} {FK}
}

class Submitted_Homework {
  + id: INT {PK}
  homework_id: INT {FK}
  student_id: INT {FK}
  --
  submission_content: TEXT
  submission_date: TIMESTAMP
  submission_attachment: VARCHAR(255)
  status: ENUM('pending', 'reviewed', 'rejected')
  correct_answers: INT
  percentage: DECIMAL(5,2)
  feedback: TEXT
  corrected_submission: TEXT
}

class Assessments {
  + id: INT {PK}
  teacher_id: INT {FK}
  --
  title: VARCHAR(255)
  description: TEXT
  due_date: DATE
  attachment: VARCHAR(255)
  subject: VARCHAR(255)
  created_at: TIMESTAMP
}

class Assessment_Students {
  + assessment_id: INT {PK} {FK}
  + student_id: INT {PK} {FK}
}

class Submitted_Assessments {
  + id: INT {PK}
  assessment_id: INT {FK}
  student_id: INT {FK}
  --
  submission_content: TEXT
  submission_date: TIMESTAMP
  submission_attachment: VARCHAR(255)
  status: ENUM('pending', 'reviewed', 'rejected')
  grade: VARCHAR(10)
  feedback: TEXT
}

class Grades {
  + id: INT {PK}
  student_id: INT {FK}
  teacher_id: INT {FK}
  --
  subject: VARCHAR(100)
  grade: DECIMAL(5,2)
  feedback: TEXT
  created_at: TIMESTAMP
}

class Attendance {
  + id: INT {PK}
  student_id: INT {FK}
  recorded_by: INT {FK}
  --
  date: DATE
  status: ENUM('present', 'absent', 'excused')
  created_at: TIMESTAMP
}

' ---------------------------------------
' Academic Management Relationships
' ---------------------------------------
Users "1" -- "M" Homework : teacher_id (via Users.id)
Homework "1" -- "M" Homework_Students : homework_id
Users "1" -- "M" Homework_Students : student_id (via Users.id)
Homework "1" -- "M" Submitted_Homework : homework_id
Users "1" -- "M" Submitted_Homework : student_id (via Users.id)

Users "1" -- "M" Assessments : teacher_id (via Users.id)
Assessments "1" -- "M" Assessment_Students : assessment_id
Users "1" -- "M" Assessment_Students : student_id (via Users.id)
Assessments "1" -- "M" Submitted_Assessments : assessment_id
Users "1" -- "M" Submitted_Assessments : student_id (via Users.id)

Users "1" -- "M" Grades : student_id (via Users.id)
Users "1" -- "M" Grades : teacher_id (via Users.id)
Users "1" -- "M" Attendance : student_id (via Users.id)
Users "1" -- "M" Attendance : recorded_by (via Users.id)

' ---------------------------------------
' Scheduling Tables
' ---------------------------------------
class AppointmentSlots {
  + id: INT {PK}
  teacher_id: INT {FK}
  --
  date: DATE
  time: TIME
  type: ENUM('online', 'in-person')
  created_at: TIMESTAMP
}

class BookedSlots {
  + id: INT {PK}
  slot_id: INT {FK}
  parent_id: INT {FK}
  student_id: INT {FK}
  --
  booked_at: TIMESTAMP
}

class calendar_events {
  + id: INT {PK}
  --
  title: VARCHAR(255)
  start_date: DATE
}

' ---------------------------------------
' Scheduling Relationships
' ---------------------------------------
Users "1" -- "M" AppointmentSlots : teacher_id (via Users.id)
AppointmentSlots "1" -- "M" BookedSlots : slot_id
Users "1" -- "M" BookedSlots : parent_id (via Users.id)
Users "1" -- "M" BookedSlots : student_id (via Users.id)

' Notes about implicit FKs where role is inferred from Users.id:
note "Relationships where a FK points to Users.id but implies a specific role (e.g., teacher_id, student_id, parent_id) are explicitly labelled for clarity. The underlying SQL FK is to Users.id." as N1
' N1 -- Users

@enduml